{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"chestcolab","provenance":[],"authorship_tag":"ABX9TyNDrl3zLUPXnv2hKeFwtqdn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"TvEXLjDiQGQp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"outputId":"ffe5b658-3ad3-4a3f-c840-de75f2ce81a5","executionInfo":{"status":"ok","timestamp":1584192955443,"user_tz":-330,"elapsed":36860,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sDjl9ONNQP1H","colab_type":"code","colab":{}},"source":["!unzip \"/content/gdrive/My Drive/image/chest-xray-pneumonia.zip\" -d \"/content/gdrive/My Drive/image/Data/\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mbdFuVA9VPHF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":337},"outputId":"a440cfed-84eb-46e2-8381-8b1c87d82067","executionInfo":{"status":"error","timestamp":1584203548286,"user_tz":-330,"elapsed":1496,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from keras import Sequential\n","from keras.layers import Convolution2D\n","from keras.layers import MaxPooling2D\n","from keras.layers import AveragePooling2D\n","from keras.layers import LeakyReLU\n","from keras.layers import Flatten\n","from keras.layers import Dense\n","classifier=Sequential()\n","classifier.add(Convolution2D(16,3,3, input_shape=(224,224,3)))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Convolution2D(32,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Convolution2D(16,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(128,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(16,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(128,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Convolution2D(32,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(256,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(32,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(256,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Convolution2D(64,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(512,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(64,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(512,3,3))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(128,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(Convolution2D(10,1,1))\n","classifier.add(LeakyReLU(alpha=0.1))\n","classifier.add(AveragePooling2D(pool_size=(6,6)))\n","classifier.add(Flatten())\n","\n","classifier.add(Dense(output_dim=2,activation='sigmoid'))\n","\n","classifier.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n","\n","from keras.preprocessing.image import ImageDataGenerator\n","train_datagen=ImageDataGenerator(rescale=1./255,\n","                                 shear_range=0.2,\n","                                 zoom_range=0.2\n","                                 )\n","train_datagen=ImageDataGenerator(rescale=1./255)\n","training_set=train_datagen.flow_from_directory('/content/gdrive/My Drive/image/Data/chest_xray/train', target_size=(224,224) ,batch_size=100,class_mode='categorical')\n","test_set=train_datagen.flow_from_directory('/content/gdrive/My Drive/image/Data/chest_xray/test', target_size=(224,224),batch_size=100,class_mode='categorical')\n","classifier.fit_generator(training_set,\n","                         samples_per_epoch=8000,\n","                         nb_epoch=25,\n","                         validation_data=test_set,\n","                         nb_val_samples=2000)\n"],"execution_count":8,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-8779cb38a8aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     66\u001b[0m                          \u001b[0mnb_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m25\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m                          \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_set\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m                          nb_val_samples=2000)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1656\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1657\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1658\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1659\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1660\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    235\u001b[0m                             \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m                             workers=0)\n\u001b[0m\u001b[1;32m    238\u001b[0m                     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m                         \u001b[0;31m# No need for try/except because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate_generator\u001b[0;34m(self, generator, steps, callbacks, max_queue_size, workers, use_multiprocessing, verbose)\u001b[0m\n\u001b[1;32m   1715\u001b[0m             \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mworkers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1716\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1717\u001b[0;31m             verbose=verbose)\n\u001b[0m\u001b[1;32m   1718\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1719\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mevaluate_generator\u001b[0;34m(model, generator, steps, callbacks, max_queue_size, workers, use_multiprocessing, verbose)\u001b[0m\n\u001b[1;32m    349\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0msteps_done\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 351\u001b[0;31m             \u001b[0mgenerator_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    352\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__len__'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m                 raise ValueError('Output of generator should be a tuple '\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/utils/data_utils.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    601\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m                     \u001b[0mfuture\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m                     \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtask_done\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mmp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 299\u001b[0;31m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    300\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"MQcc9U5P5UAg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":162},"outputId":"289f68bf-af46-4247-d4c5-e00df8ae33db","executionInfo":{"status":"error","timestamp":1584204418563,"user_tz":-330,"elapsed":2461,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["clc\n"],"execution_count":9,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-ca521e07510b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'clc' is not defined"]}]},{"cell_type":"code","metadata":{"id":"PC2q-7NIaXzm","colab_type":"code","colab":{}},"source":["clear"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5NszUKDX8R3n","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":330},"outputId":"bc55c4b5-e820-491d-cb15-0707c612b56c","executionInfo":{"status":"error","timestamp":1584204473034,"user_tz":-330,"elapsed":1786,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["import keras\n","from keras.applications.densenet import DenseNet121\n","from keras.layers import Input\n","from keras.models import Model\n","from keras.layers import Dense\n","from keras.optimizers import Adam\n","import numpy as np \n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from generator import DataGenerator"],"execution_count":11,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-e135c21e477a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgenerator\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataGenerator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'generator'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"It3DMd_98dsP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"outputId":"659c9a05-aecb-4fd7-ea95-f35479edd406","executionInfo":{"status":"ok","timestamp":1584204548390,"user_tz":-330,"elapsed":7330,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["pip install generator"],"execution_count":12,"outputs":[{"output_type":"stream","text":["\u001b[31mERROR: Could not find a version that satisfies the requirement generator (from versions: 0.1-alpha.linux-x86_64)\u001b[0m\n","\u001b[31mERROR: No matching distribution found for generator\u001b[0m\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YYkA7Wgl8uqj","colab_type":"code","colab":{}},"source":["import numpy as np\n","import keras\n","from PIL import Image\n","from skimage.transform import resize\n","\n","class DataGenerator(keras.utils.Sequence):\n","    'Generates data for Keras'\n","    def __init__(self, list_IDs, labels, path,batch_size=32, dim=(224,224), n_channels=3,\n","                 n_classes=1, shuffle=True):\n","        'Initialization'\n","        self.dim = dim\n","        self.batch_size = batch_size\n","        self.labels = labels\n","        self.list_IDs = list_IDs\n","        self.n_channels = n_channels\n","        self.n_classes = n_classes\n","        self.shuffle = shuffle\n","        self.path = path\n","        self.on_epoch_end()\n","        \n","\n","    def __len__(self):\n","        'Denotes the number of batches per epoch'\n","        return int(np.floor(len(self.list_IDs) / self.batch_size))\n","\n","    def __getitem__(self, index):\n","        'Generate one batch of data'\n","        # Generate indexes of the batch\n","        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n","\n","        # Find list of IDs\n","        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n","\n","        # Generate data\n","        X, y = self.__data_generation(list_IDs_temp)\n","\n","        return X, y\n","\n","    def on_epoch_end(self):\n","        'Updates indexes after each epoch'\n","        self.indexes = np.arange(len(self.list_IDs))\n","        if self.shuffle == True:\n","            np.random.shuffle(self.indexes)\n","\n","    def __data_generation(self, list_IDs_temp):\n","        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)\n","        # Initialization\n","        X = np.empty((self.batch_size, *self.dim, self.n_channels))\n","        y = np.empty((self.batch_size), dtype=int)\n","\n","        # Generate data\n","        for i, ID in enumerate(list_IDs_temp):\n","            # Store sample\n","            image = Image.open(self.path + ID)\n","            image_array = np.asarray(image.convert(\"RGB\"))\n","            image_array = image_array / 255.\n","            image_array = resize(image_array, (224, 224), mode= 'constant', anti_aliasing=True)\n","            X[i,] = image_array\n","\n","            # Store class\n","            y[i] = self.labels[ID]\n","\n","        return X,y"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MVFcakwG9cmi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":79},"outputId":"785c3d9b-9e5b-4e9f-8f41-5d2e10f3df25","executionInfo":{"status":"ok","timestamp":1584208282545,"user_tz":-330,"elapsed":3889,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["import keras\n","from keras.applications.densenet import DenseNet121\n","from keras.layers import Input\n","from keras.models import Model\n","from keras.layers import Dense\n","from keras.optimizers import Adam\n","import numpy as np \n","import pandas as pd\n","from sklearn.model_selection import train_test_split"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"e3BnuVL_9hEp","colab_type":"code","colab":{}},"source":["input_shape = (224, 224, 3)\n","train_path = '/content/gdrive/My Drive/image/Data/chest_xray/train'\n","test_path = '/content/gdrive/My Drive/image/Data/chest_xray/test'\n","num_of_class = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bUkadLYE9vdY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":205},"outputId":"870ae54e-cbc6-4614-f334-c859869f4484","executionInfo":{"status":"ok","timestamp":1584204848068,"user_tz":-330,"elapsed":21371,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["img_in = Input(input_shape)              #input of model \n","model = DenseNet121(include_top= False , # remove  the 3 fully-connected layers at the top of the network\n","                weights='imagenet',      # pre train weight \n","                input_tensor= img_in, \n","                input_shape= input_shape,\n","                pooling ='avg') \n","\n","x = model.output  \n","predictions = Dense(num_of_class, activation=\"sigmoid\", name=\"predictions\")(x)    # fuly connected layer for predict class \n","model = Model(inputs=img_in, outputs=predictions)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Downloading data from https://github.com/keras-team/keras-applications/releases/download/densenet/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5\n","29089792/29084464 [==============================] - 3s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aetLFU2T90d_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"90eb090c-689f-45b9-cb48-bee3f0387c44","executionInfo":{"status":"ok","timestamp":1584206459981,"user_tz":-330,"elapsed":24657,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["!pip3 install -q pydicom \n","!pip3 install -q tqdm \n","!pip3 install -q imgaug \n","import os \n","import sys\n","import random\n","import math\n","import numpy as np\n","import cv2\n","import matplotlib.pyplot as plt\n","import json\n","import pydicom\n","from imgaug import augmenters as iaa\n","from tqdm import tqdm\n","import pandas as pd \n","import glob"],"execution_count":14,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 35.3MB 99kB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6WGSDs8e99Kg","colab_type":"code","colab":{}},"source":["partition ={}\n","\n","train_data = pd.read_csv(train_path)\n","test_data = pd.read_csv(test_path)\n","\n","train_data.index =train_data.name\n","test_data.index =test_data.name\n","\n","train_labels=train_data['label'].to_dict()\n","test_labels=test_data['label'].to_dict()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZWLFBEQs-GwM","colab_type":"code","colab":{}},"source":["!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/val/NORMAL/* /content/gdrive/My\\ Drive/image/Data/chest_xray/train/NORMAL/\n","!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/val/PNEUMONIA/* /content/gdrive/My\\ Drive/image/Data/chest_xray/train/PNEUMONIA/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zJAK2zVVAyS0","colab_type":"code","colab":{}},"source":["Normal = os.listdir('/content/gdrive/My Drive/image/Data/chest_xray/train/NORMAL/')\n","\n","Pneumonia = os.listdir('/content/gdrive/My Drive/image/Data/chest_xray/train/PNEUMONIA/')\n","\n","Nor = pd.DataFrame(Normal, columns=['name'])\n","\n","Pne = pd.DataFrame(Pneumonia, columns=['name'])\n","\n","Pne['label'] = 1\n","\n","Nor['label'] = 0 \n","\n","datas = Pne.append(Nor)\n","\n","datas.index = range(len(datas))\n","\n","datas.to_csv('info_datas.csv', index=False)\n","\n","!mkdir train\n","\n","!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/train/NORMAL/*.jpeg train/\n","\n","!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/train/PNEUMONIA/*.jpeg train/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4Fe1ikSCY0t","colab_type":"code","colab":{}},"source":["Normal = os.listdir('/content/gdrive/My Drive/image/Data/chest_xray/test/NORMAL/')\n","\n","Pneumonia = os.listdir('/content/gdrive/My Drive/image/Data/chest_xray/test/PNEUMONIA/')\n","\n","Nor = pd.DataFrame(Normal, columns=['name'])\n","\n","Pne = pd.DataFrame(Pneumonia, columns=['name'])\n","\n","Pne['label'] = 1\n","\n","Nor['label'] = 0 \n","\n","datas = Pne.append(Nor)\n","\n","datas.index = range(len(datas))\n","\n","datas.to_csv('info_test_datas.csv', index=False)\n","\n","!mkdir test\n","\n","!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/test/NORMAL/*.jpeg test/\n","\n","!cp /content/gdrive/My\\ Drive/image/Data/chest_xray/test/PNEUMONIA/*.jpeg test/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ioBBZ0JdKFK0","colab_type":"code","colab":{}},"source":["input_shape = (224, 224, 3)\n","train_path = '/content/info_datas.csv'\n","test_path = '/content/info_test_datas.csv'\n","num_of_class = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SEjzY4tvKwNW","colab_type":"code","colab":{}},"source":["img_in = Input(input_shape)              #input of model \n","model = DenseNet121(include_top= False , # remove  the 3 fully-connected layers at the top of the network\n","                weights='imagenet',      # pre train weight \n","                input_tensor= img_in, \n","                input_shape= input_shape,\n","                pooling ='avg') \n","\n","x = model.output  \n","predictions = Dense(num_of_class, activation=\"sigmoid\", name=\"predictions\")(x)    # fuly connected layer for predict class \n","model = Model(inputs=img_in, outputs=predictions)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"de8FEN3qK4Xf","colab_type":"code","colab":{}},"source":["partition ={}\n","\n","train_data = pd.read_csv(train_path)\n","test_data = pd.read_csv(test_path)\n","\n","train_data.index =train_data.name\n","test_data.index =test_data.name\n","\n","train_labels=train_data['label'].to_dict()\n","test_labels=test_data['label'].to_dict()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YswUPl1GLN_y","colab_type":"code","colab":{}},"source":["X_train = train_data['label'].to_dict()\n","X_test = test_data['label'].to_dict()\n","partition = {'train':list(X_train.keys()), 'validation':list(X_test.keys()) }"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XaVPBOJGMijg","colab_type":"code","colab":{}},"source":["train_generator = DataGenerator(partition['train'], X_train,path = '/content/train/')\n","validation_generator = DataGenerator(partition['validation'], X_test, path='/content/test/')\n","test"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yj7Ca6S-M12s","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"outputId":"e25ece43-9472-4a06-d477-edc84388b8d8","executionInfo":{"status":"ok","timestamp":1584209874140,"user_tz":-330,"elapsed":1097235,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["optimizer = Adam(lr=0.001)\n","model.compile(optimizer=optimizer, loss=\"binary_crossentropy\", metrics=[keras.metrics.binary_accuracy])\n","model.fit_generator(generator=train_generator,\n","                    validation_data=validation_generator,\n","                    use_multiprocessing=True,\n","                    workers = 4)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3657: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Epoch 1/1\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/utils/data_utils.py:610: UserWarning: The input 132 could not be retrieved. It could be because a worker has died.\n","  UserWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["163/163 [==============================] - 1084s 7s/step - loss: 0.1158 - binary_accuracy: 0.9569 - val_loss: 0.3324 - val_binary_accuracy: 0.8898\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f3f625e0e80>"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"W0DdbXy8M442","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0c1eadf6-f65c-4503-f943-208933131cc3","executionInfo":{"status":"ok","timestamp":1584211040236,"user_tz":-330,"elapsed":175929,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["model.save('/content/gdrive/My Drive/image/model.h5')\n","print(\"Saved model to disk\")"],"execution_count":41,"outputs":[{"output_type":"stream","text":["Saved model to disk\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b2I9XzAuTb0o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":162},"outputId":"445a59c6-fffd-418f-f69b-79e0b638c65b","executionInfo":{"status":"error","timestamp":1584214416730,"user_tz":-330,"elapsed":1545,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["#prediction = model.predict(np.array('/content/test/IM-0001-0001.jpeg'))\n","disp('/content/test/IM-0001-0001.jpeg')"],"execution_count":62,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-62-92886af6f2d1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdisp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/test/IM-0001-0001.jpeg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'disp' is not defined"]}]},{"cell_type":"code","metadata":{"id":"41V2s6UjXkGW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2ad16b16-ce4d-4af0-c065-2c4eec31692e","executionInfo":{"status":"ok","timestamp":1584214802552,"user_tz":-330,"elapsed":1922,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["import cv2\n","img=cv2.imread('/content/test/IM-0001-0001.jpeg')\n","img.shape"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1317, 1857, 3)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"PF8-toqNj3d7","colab_type":"code","colab":{}},"source":["img=np.expand_dims(img, axis=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lb81-d2kkE1X","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"7805891d-fcc3-425f-edec-29e6e7fb03d3","executionInfo":{"status":"ok","timestamp":1584215024088,"user_tz":-330,"elapsed":1893,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["img.shape"],"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 1317, 1857, 3)"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"59jlDHJektS5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":340},"outputId":"a31941c1-c96d-4599-e7e8-59b419a4affd","executionInfo":{"status":"error","timestamp":1584215062031,"user_tz":-330,"elapsed":1952,"user":{"displayName":"SHUBH NAINESH PACHCHIGAR","photoUrl":"","userId":"00583868796177096905"}}},"source":["prediction=model.predict(img)\n","print(prediction)"],"execution_count":66,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-66-081f8fb2091b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprediction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprediction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m         \u001b[0;31m# Case 2: Symbolic tensors or Numpy array-like.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1380\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_standardize_user_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstateful\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1382\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36m_standardize_user_data\u001b[0;34m(self, x, y, sample_weight, class_weight, check_array_lengths, batch_size)\u001b[0m\n\u001b[1;32m    755\u001b[0m             \u001b[0mfeed_input_shapes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mcheck_batch_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Don't enforce the batch size.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m             exception_prefix='input')\n\u001b[0m\u001b[1;32m    758\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_utils.py\u001b[0m in \u001b[0;36mstandardize_input_data\u001b[0;34m(data, names, shapes, check_batch_axis, exception_prefix)\u001b[0m\n\u001b[1;32m    139\u001b[0m                             \u001b[0;34m': expected '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' to have shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m                             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' but got array with shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m                             str(data_shape))\n\u001b[0m\u001b[1;32m    142\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Error when checking input: expected input_2 to have shape (224, 224, 3) but got array with shape (1317, 1857, 3)"]}]},{"cell_type":"code","metadata":{"id":"vaU_sowik2hR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}